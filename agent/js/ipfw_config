#!/bin/bash -eu
# Configures the ipfw traffic shaper.

declare ipfw_path=/sbin/ipfw

usage() {
  cat <<EOF
${1:+$*

}Usage: $0 COMMAND [OPTIONS]
Configure the local ipfw-based traffic shaper.

  COMMAND             'get', 'set', or 'clear'.

  --address VALUE     '' or 'any' (the default), an IP , or a MAC address.

  --down_bw VALUE     '', 'unlimited', or 0 for unlimited (the default),
                       int >0 for bits per second.
                       down == IN to address.

  --down_delay VALUE  '' or 0 for none (the default),
                      int >0 for milliseconds.

  --down_plr VALUE    '' or 0 for none (the default),
                      >0.0 and <=1.0 for packet loss rate.

  --up_bw VALUE       As noted above.  up == OUT from address.
  --up_delay VALUE
  --up_plr VALUE

  --ipfw_path VALUE   ipfw command path, defaults to '$ipfw_path'.

  --device VALUE      Optional and ignored but might be used in the future.

  -v, --verbose       Enable verbose output.


Example "Mobile 3G (1.6 Mbps/768 Kbps 300ms RTT 0.01% PLR)":
  $0 set --address 1.2.3.4 \\
      --down_bw 1600000 --down_delay 150 \\
      --up_bw 768000 --up_delay 150 --up_plr 0.0001
EOF
  exit 1
}

ipfw_cmd() {
  (set -x; "$ipfw_path" $*);
}

#
# Echos the current ipfw settings for the given address.
#
# Example output:
#   --up_rule--up_pipe 0200 --up_bw 768000 --up_delay 150 --up_plr 0.0001
#
# \param up_or_down 'up' or 'down'.
# \param addr '', 'any', IP, or MAC address.
# \return 0 if success, else non-zero
get_ipfw() {
  local -r up_or_down="$1"
  local -r addr=$([[ "${2:-any}" != any ]] && echo "$2")

  local -r is_up=$([[ "$up_or_down" == 'up' ]] && echo true || echo false)
  local -r dir=$($is_up && echo out|| echo in)
  local -r from=$($is_up && echo "${addr:-any}" || echo any)
  local -r to=$($is_up && echo any || echo "${addr:-any}")

  local rule_id=
  local pipe_id=
  # Find rule.  Example list output:
  #   00200 pipe 7 ip from any to 1.2.3.4 in
  local -r rule_re="^[\ ]*[0-9]+[\ ]+pipe[\ ]+[0-9]+[\ ]+(ip|mac)$(:
      )[\ ]+from[\ ]+$from[\ ]+to[\ ]+$to[\ ]+$dir[\ ]*$"
  IFS=$'\n'
  for line in $(ipfw_cmd list); do
    IFS=' '
    [[ $? -eq 0 ]] || return $?
    if [[ "$line" =~ $rule_re ]]; then
      local -a arr=($line)
      rule_id="${arr[0]}"
      pipe_id="${arr[2]}"
    fi
    IFS=$'\n'
  done
  IFS=' '
  [[ -n "$rule_id" && -n "$pipe_id" ]] || return 0

  local bw=0
  local delay=0
  local plr=0
  # Parse `ipfw pipe show $pipe_id` output, e.g. on Linux:
  #   00300:   1.234 Kbit/s 42 ms burst 0
  #   q131372  50 sl.plr 0.001000 0 flows (1 buckets) sched 65836 ...
  # and on OSX:
  #   00300:   1.234 Kbit/s 42 ms 50 sl.plr 0.001 0 queues (1 buckets) ...
  local -r part1_re="^[\ ]*0*$pipe_id:[\ ]+$(:
      )(unlimited|([0-9]+\.[0-9]{3}[\ ]+[KM]?bit/s))$(:
      )[\ ]+[0-9]+[\ ]+ms[\ ]+"
  local -r part2_re="^.*[\ ][0-9]+[\ ]+sl\.plr[\ ]+[0-9\.]+[\ ]+[0-9]"
  IFS=$'\n'
  for line in $(ipfw_cmd pipe show "$pipe_id"); do
    IFS=' '
    [[ $? -eq 0 ]] || return $?
    if [[ "$line" =~ $part1_re ]]; then
      local -a arr=($line)
      if [[ "${arr[1]}" == unlimited ]]; then
        delay="${arr[2]}"
      else
        local int=${arr[1]%%\.*}
        local fra=${arr[1]##*\.}
        [[ "${arr[2]}" =~ ^M ]] && bw=$(((int*1000000 + fra*1000)))
        [[ "${arr[2]}" =~ ^K ]] && bw=$(((int*1000 + fra)))
        [[ "${arr[2]}" =~ ^b ]] && bw=$int
        delay="${arr[3]}"
      fi
    fi
    if [[ "$line" =~ $part2_re ]]; then
      local -a arr=($line)
      for (( i=0; i < ${#arr[@]}; i++ )); do
        [[ "${arr[i]}" == 'sl.plr' ]] && plr="${arr[i+1]}"
      done
    fi
    IFS=$'\n'
  done
  IFS=' '

  local u="${up_or_down}"
  echo "--${u}_rule $rule_id --${u}_pipe $pipe_id$(:
    ) --${u}_bw $bw --${u}_delay $delay --${u}_plr $plr"
  return 0
}

#
# Update the ipfw rule and/or pipe
#
# \param up_or_down 'up' or 'down'.
# \param addr '', 'any', IP, or MAC address.
# \param bw '', 'unlimited', or >0 (in bits per second).
# \param delay '' or >0 (in milliseconds)
# \param plr (packet loss rate) '' or 0.0 <= value <= 1.0.
# \return 0 if success, else non-zero
update_ipfw() {
  local -r up_or_down="$1"
  local -r addr=$([[ "$2" != any ]] && echo "$2")
  local -r bw=$([[ ! "$3" =~ ^(unlimited|0*)$ ]] && echo "$3")
  local -r delay=$([[ ! "$4" =~ ^0*$ ]] && echo "$4")
  local -r plr=$([[ ! "$5" =~ ^0(\.0+)?$ ]] && echo "$5")

  # Address must be 'any', IP, or a MAC
  local -r proto=$([[ -z "$addr" || "$addr" == any ]] && echo ip ||
      [[ "$addr" =~ ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$ ]] && echo mac ||
      [[ "$addr" =~ ^[0-9a-fA-F\.:\$\/]+$ ]] && echo ip)
  [[ -n "$proto" ]] || { \
      echo "Invalid address '$addr'" >/dev/stderr; return 1; }

  # Bandwidth must be '', 'unlimited', or int >= 0
  [[ "$bw" =~ ^(unlimited|[0-9]+)?$ ]] || \
      { echo "Invalid bw '$bw'" >/dev/stderr; return 1; }

  # Divide delay equally  (must be '' or an int >= 0)
  [[ "$delay" =~ ^[0-9]*$ ]] || \
      { echo "Invalid delay '$delay'" >/dev/stderr; return 1; }

  # Incur all packet-loss-rate on the output  (must be '' or [0..1])
  [[ "$plr" =~ ^(0|0\.[0-9]+|1\.0+|1)?$ ]] || \
      { echo "Invalid plr '$plr'" >/dev/stderr; return 1; }

  [[ "$up_or_down" != 'test' ]] || return 0

  local -r is_up=$([[ "$up_or_down" == 'up' ]] && echo true || echo false)
  local -r dir=$($is_up && echo out|| echo in)
  local -r from=$($is_up && echo "${addr:-any}" || echo any)
  local -r to=$($is_up && echo any || echo "${addr:-any}")

  local -r is_delete=$([[ -z "$bw" && -z "$delay" && -z "$plr" ]] &&
      echo true || echo false)

  # Get the current settings
  local rule_id=
  local pipe_id=
  local curr_bw=
  local curr_delay=
  local curr_plr=
  local -a arr=($(get_ipfw "$up_or_down" "${addr}"))
  for (( i=0; i+1 < ${#arr[@]}; i+=2 )); do
    local v="${arr[i+1]}"
    case ${arr[i]} in
      --*_rule) rule_id="$v";;
      --*_pipe) pipe_id="$v";;
      --*_bw) curr_bw="$v";;
      --*_delay) curr_delay="$v";;
      --*_plr) curr_plr="$v";;
      *) echo "ERROR $k";;
    esac
  done

  if $is_delete; then
    if [[ -n "$rule_id" ]]; then
      ipfw_cmd delete "$rule_id"
      ipfw_cmd pipe delete "$pipe_id"
      ipfw_cmd delete "$pipe_id"  # this is our dummy rule
    fi
    return 0
  fi

  local reuse_pipe=false
  if [[ -z "$pipe_id" ]]; then
    # Dynamically allocate an unused pipe_id.
    #
    # Sadly, ipfw doesn't support automatic pipe numbers, otherwise we'd do:
    #   `ipfw pipe config bw ...`
    #
    # Similarly, if we add a rule with a dummy action, then use the generated
    # rule_id for our pipe_id to create our pipe, there's apparently no way to
    # overwrite the original rule's dummy action without giving up our rule_id.
    #
    # Instead, we add a dummy rule that does nothing:
    #   `ipfw add skipto 1 ip $dummy to $dummy`
    # which will generate a unique id that we can use as our pipe_id.
    local -r dummy=203.0.113.10  # RFC 5737
    local line=$(ipfw_cmd add skipto 1 ip from "$dummy" to "$dummy")
    [[ $? -eq 0 ]] || { echo "$line" >/dev/stderr; return 1; }
    [[ "$line" =~ ^[0-9]+[\ ] ]] || { \
        echo "Expecting a RULE-ID not '$line'" >/dev/stderr; return 1; }
    local -a arr=($line)
    pipe_id="${arr[0]}"
  else
    # See if our pipe is already configured correctly.
    #
    # This branch is optional -- we could simply always set `reuse_pipe=false`.
    # However, it's nice to not re-configure the pipe if it's already configured
    # correctly.
    reuse_pipe=$([[ "${bw:-0}" == "${curr_bw:-0}" &&
        "${delay:-0}" == "${curr_delay:-0}" &&
        "${curr_plr:-0}" =~ ^0*${plr:-0}\.?0*$ ]] && echo true || echo false)
  fi

  if ! $reuse_pipe; then
    # Add / modify pipe, e.g.:
    #   `ipfw pipe 1 config bw 12345bit/s delay 1000ms plr 0.05`
    ipfw_cmd pipe "${pipe_id}" config \
        $([[ -n "$bw" ]] && echo bw "${bw}bit/s") \
        $([[ -n "$delay" ]] && echo delay "${delay}ms") \
        $([[ -n "$plr" ]] && echo plr "$plr") || return $?
  fi

  if [[ -z "$rule_id" ]]; then
    if [[ "$from" == 'any' && "$to" == 'any' ]]; then
      # Use the max available id.  This ensures that more-specific to/from
      # rules will be matched first.
      local -r max_id=65545  # from the ipfw doc
      local -r offset=$([[ "$dir" == 'in' ]] && echo 1 || echo 2)
      rule_id=$((max_id - offset))
    fi
    # Add rule, e.g.:
    #   `ipfw add pipe 100 ip from any to 1.2.3.4 in`
    local line=$(ipfw_cmd add "${rule_id:-}" pipe "$pipe_id" "$proto" \
        $([[ "$proto" == ip ]] && \
            echo from "$from" to "$to" || echo "$to" "$from") \
        "$dir")
    [[ $? -eq 0 ]] || { echo "$line" >/dev/stderr; return 1; }
    [[ "$line" =~ ^[0-9]+[\ ] ]] || { \
        echo "Expecting a RULE-ID not '$line'" >/dev/stderr; return 1; }
    local -a arr=($line)
    rule_id="${arr[0]}"
  fi

  return 0
}

main() {
  # Parse args
  local command=
  local addr=
  local down_bw=
  local down_delay=
  local down_plr=
  local up_bw=
  local up_delay=
  local up_plr=
  while [[ $# -gt 0 ]]; do
    local v="${2:-MISSING}"
    local shift_by=2
    case "$1" in
      [^-]*) [[ -z "$command" ]] || usage "Duplicate command"
             command="$1"; shift_by=1;;
      --ipfw_path) ipfw_path="$v";;
      --address) addr="$v";;
      --device) ;;  # ignore for now
      --down_bw) down_bw="$v";;
      --down_delay) down_delay="$v";;
      --down_plr) down_plr="$v";;
      --up_bw) up_bw="$v";;
      --up_delay) up_delay="$v";;
      --up_plr) up_plr="$v";;
      -v | --verbose) set -x; shift_by=1;;
      -h | --help) usage;;
      *) usage "Unknown option '$1'";;
    esac
    shift $shift_by
  done

  [[ -z "$command" || "$command" == set ]] || \
      [[ -z "$down_bw" && -z "$down_delay" && -z "$down_plr" &&
         -z "$up_bw" && -z "$up_delay" && -z "$up_plr" ]] ||
      usage "Unexpected down/up options"

  [[ "$command" == clear ]] && command=set

  if [[ "$command" == set ]]; then
    # validate up_* args before we apply the down_* args
    update_ipfw test "$addr" "$up_bw" "$up_delay" "$up_plr" || return 1
    update_ipfw down "$addr" "$down_bw" "$down_delay" "$down_plr" || return 1
    update_ipfw up "$addr" "$up_bw" "$up_delay" "$up_plr" || return 1
  elif [[ "$command" == get ]]; then
    get_ipfw down "$addr"
    get_ipfw up "$addr"
  else
    usage ${command:+Unknown command \'$command\'}
  fi
  return 0
}

main $*
exit $?
